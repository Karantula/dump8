pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
--variables

function _init()

 --added--

 moving = false

	countdown = 10 --spawn timer for items


 speed = 1 --!todo! changing speed breaks the map

 vx=0 --velocity
 thrust=0

 gear=0

 clockrt=0 --todo
 clockrl=0

 --^^^added^^^^--

 scene="game"

 player={
  sp=47,
  x=59,
  y=59,
  w=8,
  h=8,
  flp=false,
  dx=0,
  dy=0,
  max_dx=2,
  max_dy=3,
  acc=0.5,
  boost=4,
  anim=0,
  walking=false,
  jumping=false,
  falling=false,
  sliding=false,
  landed=false
 }

 gravity=0.3
 friction=0.75

 --simple camera
 cam_x=0

 --map limits
 map_start=0
 map_end=1024

 -----test----
 x1r=0 y1r=0 x2r=0 y2r=0
 --collide_l="no"
 --collide_r="no"
 --collide_u="no"
 --collide_d="no"
 -------------
end


function player_update()

 --physics
 player.dy+=gravity
 player.dx*=friction

 --controls
 if btn(⬅️) then
  player.dx-=player.acc
  player.walking=true
  player.flp=true
 end
 if btn(➡️) then
  player.dx+=player.acc
  player.walking=true
  player.flp=false
 end

 --slide
 if player.walking
 and not btn(⬅️)
 and not btn(➡️)
 and not player.falling
 and not player.jumping then
  player.walking = false
  player.sliding = true
 end

 --jump
 if btnp(4)
 and player.landed then
  player.dy-=player.boost
  player.landed=false
 end

 --check collision up and down
 if player.dy>0 then
  player.falling=true
  player.landed=false
  player.jumping=false

  player.dy=limit_speed(player.dy,player.max_dy)

  if collide_map (player,"down",0) then
   player.landed=true
   player.falling=false
   player.dy=0
   player.y-=((player.y+player.h+1)%8)-1

   ------test---------
   collide_d="yes"
   else collide_d="no"
   -------------------

  end
 elseif player.dy<0  then
  player.jumping=true
  if collide_map(player,"up",1) then
   player.dy=0

   ------test---------
   collide_u="yes"
   else collide_u="no"
   -------------------
  end
 end

 --check collision left and right
 if player.dx<0 then

  player.dx=limit_speed(player.dx,player.max_dx)

  if collide_map(player,"left",1) then
   player.dx=0

   ------test---------
   collide_l="yes"
   else collide_l="no"
   -------------------
  end
 elseif player.dx>0 then

  player.dx=limit_speed(player.dx,player.max_dx)

  if collide_map(player,"right",1) then
   player.dx=0

   ------test---------
   collide_r="yes"
   else collide_r="no"
   -------------------
  end
 end

 --stop sliding

 if player.sliding then
  if abs(player.dx)<.2
  or player.walking then
   player.dx=0
   player.sliding=false
  end
 end

 player.x+=player.dx
 player.y+=player.dy

 --limit player to map
 if player.x<map_start then
  player.x=map_start
 end
 if player.x>map_end-player.w then
  player.x=map_end-player.w
 end

end

function player_animate()
  if player.jumping then
   player.sp=57
  elseif player.falling then
   player.sp=58
  elseif player.sliding then
   player.sp=59
  elseif player.walking then
   if time()-player.anim>.1 then
    player.anim=time()
    player.sp+=1
    if player.sp>55 then
     player.sp=48
    end
   end
 else
	if time()-player.anim>.3 then
   player.anim=time()
   player.sp+=1
   if player.sp>47 then
    player.sp=47
   end
  end
 end
end

function limit_speed(num,maximum)
 return mid(-maximum,num,maximum)
end
-->8
--collisions

function collide_map(obj,aim,flag)
 --obj = table needs x,y,w,h

 local x=obj.x local y=obj.y
 local w=obj.w local h=obj.h

 local x1=0 local y1=0
 local x2=0 local y2=0

 if aim=="left" then
  x1=x-1   y1=y
  x2=x     y2=y+h-1
 elseif aim=="right" then
  x1=x+w-1   y1=y
  x2=x+w y2=y+h-1
 elseif aim=="up" then
  x1=x+2   y1=y-1
  x2=x+w-3 y2=y
 elseif aim=="down" then
  x1=x+2     y1=y+h
  x2=x+w-3   y2=y+h
 end


 ------test-------
 x1r=x1 y1r=y1
 x2r=x2 y2r=y2
 -----------------

 --pixels to tiles
 x1/=8 y1/=8
 x2/=8 y2/=8

 if fget(mget(x1,y1),flag)
 or fget(mget(x1,y2),flag)
 or fget(mget(x2,y1),flag)
 or fget(mget(x2,y2),flag) then
  return true
 else
  return false
 end
end
-->8
--init drive+truck

function init_drive()

	game_level_street=0



 init_drive_camera()
 init_truck()
 init_player()
	--init_objects()


	moving = false

	countdown = 10 --spawn timer for items


 speed = 1 --!todo! changing speed breaks the map

 vx=0 --velocity
 thrust=0

 gear=0

 clockrt=0 --todo
 clockrl=0
end

function update_drive()

 move_player()
 controls()
 update_drive_map()

 --gear shifting, ugly conditionals
 if (moving) then

  --accelerate/decelerate based on what gear
  --added 0.1 tollerance
  if (vx+0.1<gear) then
   thrust = 0.1
  elseif (vx>gear) then
   thrust = -0.1
  else
   thrust=0
   vx=flr(vx+0.1)
  end

  countdown-=1

  mx=x1+10
  my=y1

  --sfx(0)
  vx+=thrust

  if gear<1 and gear>0 then gear=0 end

 end

 --when slowing down, stop at 0 and reset thrust
 if (vx<=0) then
  moving=false
  vx = 0.0
  thrust=0.1
 end

 if (countdown <1) then
  countdown = 20
 end

 if (countdown == 1) then
  --add_new_item(x0+120,rnd(40)+70,rnd(4)+32)
 end


 for i in all(items) do
  i:update()
 end
 for a in all(args) do
  a:update()
 end
 for o in all(outlines) do
  o:update()
 end

 if clockrt>10 then game_level_street=2
 elseif clockrt>5 then game_level_street=1 end
 --if clockrt>10 then game_level_street=0 end

 clockrt+=1/30
 clockrl+=abs(vx/sqrt(1-(vx*vx/299792485*299792485)))
 --⌂debugger⌂__
 --uncomment (and swap arg)
 --add_new_arg(vx, x0, 10,7)
 --add_new_arg(clockrt, x0, 30,8)
 --add_new_arg(vx/sqrt(1-(vx*vx/299792485*299792485)), x0, 50,9)
 --add_new_outline(doorx0,doory0,doorx1,doory1,11)
 --add_new_outline(mx,my,mx+mw,my+mh,10)
end

function draw_drive()
 cls()
 draw_map()
 --camera(c0,c1)

 for i in all(items) do
  i:draw()
 end

 for a in all(args) do
  a:draw()
 end

 --draw last to appear on top
 draw_truck(x0,x1,y0,y1)

 if vx == 0 then
  draw_player(mx,my,msp)
 end

 for o in all(outlines) do
  o:draw()
 end
end

function box_hit(
 x1,y1,w1,h1,
 x2,y2,w2,h2)

 local hit=false

 local xd=abs((x1+(w1/2))-(x2+(w2/2)))
 local xs=w1/2+w2/2
 local yd=abs((y1+(h1/2))-(y2+(h2/2)))
 local ys=h1/2+h2/2

 if xd<xs and
    yd<ys then
  hit=true
 end

 return hit
end

--truck

function init_truck()
	--truck coords
	x0=10
	x1=50
	y0=70
	y1=90

	whsp=2 --wheel sprite counter
	whspc=1 --sprite counter

	--door collider coords
 doorx0 = x0+40
 doory0 = y0+15
 doorx1 = x1+15
 doory1 = y1+10

 --truck collider coords
 trx = x0
 try = y0-2
 trx1 = x1+16
 try1 = y1-1

 trw = 56
 trh = 20
end

function draw_truck(_x0,_x1,_y0,_y1)

 x0=_x0
 x1=_x1
 y0=_y0
 y1=_y1

 rectfill(x0,y0,x1,y1,7) -- box
 rect(x0,y0,x1,y1,4) -- box outline
 circfill(x0+20,y0+10,7,9) -- sign circle
 line(x0+12,y0+11,x0+20,y0+11,0) -- white line txt sign
 line(x0+18,y0+9,x0+26,y0+9,7) -- black line txt sign

 spr(6,x1+1,y0+4,2,2) -- cabin

 line(x1+1,y0+3,x1+10,y0+3,7) --cabin top white line
 line(x1+1,y0+2,x1+9,y0+2,4) --cabin top orange line
 pset(x1+10,y0+3,4) -- orange dot on white line

 spr(whsp,x0+2,y1-2) -- back wheel
 spr(whsp,x0+40,y1-2) -- front wheel

 pset(x0-1,y0-1,4) -- top left pixel
 pset(x1-1,y0-1,4) -- top right pixel
 pset(x0-1,y1-1,4) -- bottom left pixel
 line(x0-2,y0-2,x1-2,y0-2,4) -- top of the truck
 line(x0-2,y1-2,x0-2,y0-2,4) -- back of the truck
 line(x0,y0-1,x1-2,y0-1,7) -- top white fill
 line(x0-1,y0,x0-1,y1-2,7) -- back white fill
 line(x1-2,y1+1,x1-4,y1+1,13) -- far wheel
 line(x0,y1+1,x0+2,y1+1,13) -- another far wheel

 --wheels spinnin
 if vx<1.5 then
  whsp+=vx
 else
  whsp+=whspc*1.1
 end
 if (whsp > 4) then
  whsp = 1
 end

 --can't move vertically beyond bounds
  if (y0<50) then
  	y0 = 50
  	y1 = 70
  end
  if (y0>98) then
  	y0 = 98
  	y1 = 118
  end
  --same for collider
  if (doory0<65) then
  	doory0 = 65
  	doory1 = 80
  end
  if (doory0>112) then
  	doory0 = 112
  	doory1 = 128
  end
end



function collider(
 _dx0,_dy0,_dx1,_dy1,
 _px,_py)

 dx0 = _dx0
 dy0 = _dy0
 dx1 = _dx1
 dy1 = _dy1
 px = _px
 py = _py


 collision = false

 if px>dx0
 and px<dx1
 and py>dy0
 and py<dy1
  then collision = true end

 return collision
end
-->8
--player drive

function init_player()
 mx = x1+10 --player coords
	my = y1

	mw=8
	mh=8

	msp = 48 --player sprite
 facing_right = true
 iswalking = false
end

function draw_player(_x,_y,_sp)

 mx = _x
 my = _y
 msp = _sp

	if (iswalking == false) then
	 msp = 39
	end
	if (facing_right) then
   spr(msp,mx,my) else
   spr(msp,mx,my,1,1,true)
 end

end

function move_player()
  iswalking = false

  if (btn(0)) then
   facing_right = false

   for newx=mx,mx-speed,-1 do
    if not box_hit(newx,my,mw,mh,
                   trx,try,trw,trh) then
      mx=newx
      iswalking = true
    end
   end
  end

  if (btn(1)) then
   facing_right = true
   for newx=mx,mx+speed do
    if not box_hit(newx,my,mw,mh,
                   trx,try,trw,trh) then
      mx=newx
      iswalking = true
    end
   end
  end

  if (btn(2)) then
   for newy=my,my-speed,-1 do
    if not box_hit(mx,newy,mw,mh,
                   trx,try,trw,trh) then
      my=newy
      iswalking = true
    end
   end
  end

  if (btn(3)) then
   for newy=my,my+speed do
    if not box_hit(mx,newy,mw,mh,
                   trx,try,trw,trh) then
      my=newy
      iswalking = true
    end
   end
  end
  --vertical constraint for player
--  if (my<60) then
  --	my=60
 -- end
 -- if (my>120) then
 -- 	my=120
 -- end

  --cycle frames if walking
  if (iswalking == true) then
   if msp < 48 then msp = 48 end
   msp+=1
   if (msp >55) then
    msp = 48
   end
  end
end

function controls()

 if (btnp(4))
 and moving == false
 and collider(
   doorx0,doory0,doorx1,doory1,
   mx,my) then
   moving = true
   gear = 1
 elseif (btnp(4)) and moving == true and vx > 0 then
  gear=0
 end

 if (moving) then

  if (btnp(0)) then
   gear-=1
  end
  if (btnp(1)) then
   gear+=1
  end
  if (btn(2)) then
   y0=y0-speed
   y1=y1-speed
   doory0=doory0-speed
   doory1=doory1-speed
  end
  if (btn(3)) then
   y0=y0+speed
   y1=y1+speed
   doory0=doory0+speed
   doory1=doory1+speed
  end


 end
end
-->8
--drive map and camera+objects

function init_drive_camera()
 --c0=0 --camera coords
	--c1=0
	map_x=0
	map_collumn=0
	map_row=0
end

function update_drive_map()
 if (moving) then
  --c0+=vx
  map_x-=vx
 end

 if game_level_street == 1 then
  map_row=16
 elseif game_level_street == 0 then
  map_row=0
  elseif game_level_street == 2 then
  map_row=0
  map_collumn=32
 end
 if map_x < -255 then map_x=0 end
end


function draw_drive_map()
		map(map_collumn,map_row,map_x-50,0,64,16)
		map(map_collumn,map_row,map_x+206,0,64,16)
end


function _update()
 if scene=="drive" then

  init_truck()
  init_player()
  init_drive_camera()
  update_drive()
  update_drive_map()
 elseif scene=="game" then
	 player_update()
	 player_animate()

	 --simple camera
  cam_x=player.x-64
  if cam_x<map_start then
   cam_x=map_start
  end
  if cam_x>map_end-128 then
   cam_x=map_end-128
  end

  camera(cam_x,0)
 end


end

function _draw()
 if scene=="game" then
  cls()
  map(0,0)
  spr(
   player.sp,
   player.x,
   player.y,
   1,
   1,
   player.flp
   )
 elseif scene=="drive" then
  cls()
  draw_drive_map()
  draw_truck(x0,x1,y0,y1)

 if vx == 0 then
  draw_player(mx,my,msp)
 end
 end

  --------test--------
  --rect(x1r,y1r,x2r,y2r,7)
  --print("⬅️= "..collide_l,player.x,player.y-10)
  --print("➡️= "..collide_r,player.x,player.y-16)
  --print("⬆️= "..collide_u,player.x,player.y-22)
  --print("⬇️= "..collide_d,player.x,player.y-28)
  --------------------
end

__gfx__
00000000005555000055550000555500005555007740000044444444444400000000000000000000000000000000000000000000000000000000000000000000
00000000065555500556555005555560055555504444000077747777777740000000000000000000000000000000000000000000000000000000000000000000
007007005567755555577555555776555557755577c6400077747155555554000000000000000000000000000000000000000000000000000000000000000000
000770005577775555777755557777555577775577cc640077747111666655400000000000000000000000000000000000000000000000000000000000000000
000770005577775555777755557777555577775577ccc40077747111111665400000000000000000000000000000000000000000000000000000000000000000
00700700555776555557755555677555555775557777740077747111111166400000000000000000000000000000000000000000000000000000000000000000
00000000055555600555555006555550055565507777740077747111111116400000000000000000000000000000000000000000000000000000000000000000
00000000005555000055550000555500005555004444400077747111111116400000000000000000000000000000000000000000000000000000000000000000
77777777000000000000000000000000000000000000000077744444444444400000000000000000000000000000000000000000000000000000000000000000
77777777000000000000000000000000000000000000000077744777777777400000000000000000000000000000000000000000000000000000000000000000
77000077000000000000000000000000000000000000000077744777777777400000000000000000000000000000000000000000000000000000000000000000
77000077777777770000000000000000000000000000000077744744777744400000000000000000000000000000000000000000000000000000000000000000
77000077000000000000000000000000000000000000000077744777777744a00000000000000000000000000000000000000000000000000000000000000000
77000077000000000000000000000000000000000000000077744777777744a00000000000000000000000000000000000000000000000000000000000000000
77777777000000000000000000000000000000000000000077744777777744a00000000000000000000000000000000000000000000000000000000000000000
77777777000000000000000000000000000000000000000044444444444444400000000000000000000000000000000000000000000000000000000000000000
44444444404000000000000009999999444444440000000000000000004444000000000000000000000000000000000000000000000000000000000000444400
455566644040000000000000fffffff9444444440000000000000000004848000000000000000000000000000000000000000000000000000000000000484800
455555644040000004444444f66666f5455555540000000000000000004444000000000000000000000000000000000000000000000000000000000000444400
455555544000004044444440f66666f5454444540000000000000000049999400000000000000000000000000000000000000000000000000000000004999940
455555544444404040504050f66666f5455555540000000000000000049999400000000000000000000000000000000000000000000000000000000004999940
455555544000404040504050f66666f5454444540000000000000000049999400000000000000000000000000000000000000000000000000000000004999940
444444444000404040504050fffffff045555554000000000000000000c0c0000000000000000000000000000000000000000000000000000000000000c0c000
0400004040004040400040000000000044444444000000000000000000c0c0000000000000000000000000000000000000000000000000000000000000c0c000
00444400004444000000000000444400004444000044440000000000004444000000000000044440004444000000000000000000000000000000000000000000
00484800004848000044440000484800004848000048480000444400004848000000000000044840004848000044440000000000000000000000000000000000
04999940004444000048480000444400049999400044440000484800004444000000000000044440004444000048480000000000000000000000000000000000
04999940049999400499994004999940049999400499994004999940049999400000000000499990009999400044440000000000000000000000000000000000
04999940049999400499994004999940049999400499994004999940049999400000000004099990004999040499994000000000000000000000000000000000
040cc040040cc04004999940040cc040040cc040040cc04004999940040cc0400000000040099990009499004009940000000000000000000000000000000000
000cc0000000c0000400c04000cc0c0000ccc000000c0c00040c0c4000cc0c0000000000000c0c00000c0c00000c0c0000000000000000000000000000000000
0000c000000c000000c00c0000000c00000c0000000c000000c000c000000c000000000000c0c0000000c0c0000000c000000000000000000000000000000000
bbbbbbbbcccccccc7777777666655500000006666000000700444400000055600000000055555555555555555111111454445444000000002222222221111112
bbbbbbbbcccccccc7707700066000000060066660066077700484800000556700000000011511511115115115100001551111115000000002522222221000012
bbbbbbbbcccccccc7770000660000060000666000667777700444400005560000000000055555555555555554100001441111114000000002511111221000012
bbbbbbbbcccccccc7700066000000660006600066777776604999a41055670000000000011151111111511115100001551011015000000002510101221000012
bbbbbbbbcccccccc7006600000066000660006677777760004441111116000000000000055555555555555555100001451011014000000002510101221000012
bbbbbbbbcccccccc666000000666000060006677777660000099aa01110000000000000011511511115115115100001551111115000000002511111221000012
bbbbbbbbcccccccc6600000066000000000667777660000000c0c000000000000000000055555555555555554100001441111114000000002555552221000012
bbbbbbbbcccccccc6000006660000006066777706600006600c0c000000000000000000011115111111151115100001555555555000000002222222221000012
00000000000000005000666000006000667770666000666000000000000055670000000000000000222222221111111221111212211111112222222222222221
05555550000000005006600000000000677706600006600000000000000556000000000000000000212222221122222222222222222222111222222222222221
05000050000000005066000006000000700660000666000000000000005567000000000000000000222222221222222222222222222222211222222222222221
55555555000000005600000000000060566000006600006600000000055600000000000000000000222222221222222222222222222222211222222222222221
50000005000000005600000600000000660000666000666000000000116700000000000000000000222222221222222222222222222222211222222222222222
55555555000000000000600000060000000066600066600000000000110000000000000000000000222222222222222222222222222222221222222222222221
0aaaaaa0000000000000000060000000000660006660666000000000000000000000000000000000222222222222222222222222222222222222222222222221
00aaaa00000000000000000000000000006600006006600000000000000000000000000000000000222222222222222222222222222222221222222222222221
00000056000000006666666677755500000000005555666000000000666666666666666600000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb1111111111111112
0000005666666600666776667700000000000005566660000000000055565655555555550000000033bb33b33bbb33bbbbbbbbbbbbb33bbb2111111111111112
0000005655555660667666777700006000000005660000600000000000565600000000000000000043bb43b4bbbbbbb33b333b3333b443332111111111211112
00000056000055666766677700000660000000660000066000000000005656000000000000000000433b43b43bbbb3b444444b4444b443442111111111111112
00000056000005566667770000066000000066000006600000000000005656000000000000000000443b4434443b443444644b444434a4442111111111111111
00000056000000567777000006660000056600000666000000000000005656000000000000000000443344447433444444444344444444442111111111111112
00000056000000567770000066000000556000006600000000000000005656000000000000000000444444444444445445444444454444541111111111111112
00000056000000567000006660000066560000666000005500000000005656000000000000000000444444744444444444444444444444442111111111111112
00000000000000006000666000006660600066600000655700000000005656000000000000000000222000002002020200000222000000001111111100000000
00000000000000006006600000066000000660000006607700000000005656000000000000000000000000002002020200000000000000001111111100000000
00000000000000006066000006660000006600000667777700000000005656000000000000000000220000002000020200000022000000001121111100000000
00000000000000005600000066000060560000006677777000000000005656000000000000000000000000002000000200000000000000001111111100000000
00000000000000005600006660000000560000667777770000000000005656000000000000000000222000000000000000000222000000001111111100000000
00000000000000000000666000060000000066677777700000000000005656000000000000000000000000000000000000000000000000001111111100000000
00000000000000000006600060000000000650777770000000000000005656000000000000000000220000000000000000000022000000001111111100000000
00000000000000000066000000000000006557777700000000000000005656000000000000000000000000000000000000000000000000001111111100000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010003030303000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b5c5c6e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b5a5a5a6e6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005a4e5a5a6e6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005a5a5a5a6e6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005a4e5a5a6e6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000005b5c5c5c5c5c5c6e7e7e7e000000000000000000000000000000000000000000000000000000005a5a5a5a6e6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000005b5c5a5a5a5a5a5a5a6e7e7e7e7e6f00000000000000000000000000000000000000000000000000005a4e5a5a6e6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000005e5a5a4e5a5a5a5a5a6e7e4e7e7e6f00000000000000000000000000000000000000000000000000005a5a5a5a6e6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000005e5a5a5a5a4e4f4e5a6e7e4f7e7e6f00000000000000000000000000000000000000000000000000005a4e5a5a6e6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4a4a490000000000000000006700006868686868686868685a6e7e677e7e6f00000000000000000000000000000000000000000000000000005a5a5a5a6e676868686868686868686868686868000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4a4a49000000000000000000770000005e5a5a5a5a5a5a5a5a6e7e777e7e6f00000000000000000000000000000000000000000000000000005a4e5a5a6e770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4a4a42434a49000000000000000067670000005e4e4e4e4e4e5a5a5a6e67777e7e6f000000506100000000006a6b6b6a6b6a000000000000000000005a5a5a6767770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4a4a52534a490000004c4a4c000077770000005e5a5a4e4e5a5a5a5a6e77777e4e6f00000000600000000000000000000000000000000000000000005a4e5a7777770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4a4a53534a490000004a4b4a000077770000005e5a5a5a5a5a5a5a5a6e77777e4f6f00000000600000000000000000770000000000000000000000005a5a5a7777770000000000000000000000000077000000000000000000000000000000770000000000000000000000000000007700000000000000000000000000000077
6a6b6c6d6a6b6c6d6a6b6a6d6c6d6d6b6a6a6c6d6c6d6a6b6c6d6a6b6c6d6a6c6d6c6d6a6b6c6d6a6b6c6d6b6c6d6a6c6d6c6d6a6b6c6d6a6b6a6c6d6c6d6a6b6c6d6a6b6c6d6a6c6d6c6d6a6b6c6d6a6b6c6d6a6c6d6c6d6a6b6c6d6a6b6c6d6a6c6d6c6d6a6b6c6d6a6b6c6d6a6c6d6c6d6a6b6c6d6a6b6c6d6a6c6d6c6d6a
